[tools]
rust = "1.89"
go = "1.21"
python = "3.13"

[env]
# see also: https://mise.jdx.dev/templates.html
# DATA_SIZE = "{{ 128 * 1024 * 1024 }}"
# TIMEOUT_SECONDS = "{{ 60 * 60 }}"
DATA_SIZE = "{{ 65536 }}"
TIMEOUT_SECONDS = "{{ 5 * 60 }}"
PROJECT_ROOT = "{{config_root}}"
RESULTS_DIR = "{{config_root}}/results"
WORK_DIR = "/tmp"
COMMIT = "{{ exec(command='git rev-parse --short HEAD') }}"

[tasks.setup]
description = "Setup all project dependencies"
depends = ["{{ os() }}:setup"]
run = [
  "cd python && python -m pip install -r scripts/requirements.txt",
]

[tasks.clean]
description = "Clean all build artifacts and results"
depends = ["clean:*"]
run = ["rm -rf $RESULTS_DIR/*", "rm -f *.png"]

[tasks.build]
depends = ["build:*"]

[tasks.bench]
description = "Run benchmark"
depends = ["build:*"]
run = [
  # When specified as depends, they are executed in parallel, but must be executed sequentially to
  # measure performance.
  "{{mise_bin}} run bench:info",
  "{{mise_bin}} run bench:go",
  "{{mise_bin}} run bench:rust",
]

[tasks.fmt]
description = "Format source"
depends = ["fmt:*"]

# -- Python ---

# --- Golang ---

[tasks."clean:go"]
description = "Clean Go build artifacts and results"
dir = "golang"
run = ["./iavl/iavl --clean && go mod tidy && go clean"]

[tasks."fmt:go"]
description = "Clean Go build artifacts and results"
dir = "golang"
run = ["go mod tidy && go fmt slate_benchmark/common slate_benchmark/iavl slate_benchmark/doltdb"]

[tasks."setup:go"]
description = "Setup Go project dependencies"
dir = "golang"
run = ["go mod download"]

[tasks."build:go"]
depends = ["setup:go"]
sources = ["golang/**/*.go", "golang/go.mod"]
outputs = ["golang/bench"]
dir = "golang"
run = ["go build -trimpath -o bench main.go"]

[tasks."bench:go"]
description = "Run Go benchmarks"
env.IAVL_DATA_SIZE = "{% if env.DATA_SIZE | int > 1024 * 1024 %}{{ 1024 * 1024 }}{% else %}{{ env.DATA_SIZE | default(value='1048576') }}{% endif %}"
depends = ["build:go"]
run = [
  "golang/bench $IAVL_DATA_SIZE --dir \"$WORK_DIR\" --timeout ${TIMEOUT_SECONDS}s --output \"$RESULTS_DIR\"",
]

# --- Rust Projects ---

[tasks."setup:rust"]

[tasks."clean:rust"]
dir = "rust"
run = ["target/release/slate_benchmark --clean && cargo clean"]

[tasks."fmt:rust"]
dir = "rust"
run = "cargo fmt"

[tasks."build:rust"]
description = "Build benchmark for Rust"
depends = ["setup:rust"]
sources = ["rust/src/**/*.rs", "rust/benches/**/*.rs", "rust/Cargo.toml"]
outputs = ["target/release/slate_benchmark"]
run = "cargo build --release"

[tasks."bench:rust"]
description = "Run benchmark"
depends = ["build:rust"]
run = "target/release/slate_benchmark $DATA_SIZE --dir \"$WORK_DIR\" --timeout $TIMEOUT_SECONDS --output \"$RESULTS_DIR\""

# --- Graph ---

[tasks."graph:experiments"]
run = ["./run.sh"]

[tasks."graph:io-read"]
run = ["cd scripts && python hamming-weight.py 11"]

# --- Environment Dependency ---

[tasks."bench:info"]
run = ["python bench_info.py \"$WORK_DIR\""]

[tasks."linux:setup"]
run = [
  '''
  mkdir -p $RESULTS_DIR
  sudo apt install -y llvm-dev libclang-dev clang
  ''',

  '''
  echo '🎸 Installing LaTeX...'
  sudo apt-get update
  sudo apt install -y texlive-xetex texlive-lang-japanese texlive-fonts-extra dvipng
  sudo apt install -y smartmontools fio
  ''',

  '''
  echo '🐧 Installing fonts on Linux...'
  USER_FONT_DIR="${HOME}/.local/share/fonts"
  mkdir -p "$USER_FONT_DIR"
  cp scripts/NeueHaasDisplay-Roman.ttf "$USER_FONT_DIR"
  echo "🔄 Updating font cache..."
  sudo fc-cache -fv >/dev/null 2>&1
  fc-cache -fv >/dev/null 2>&1
  echo "✅ Linux font installation complete: $(fc-list 'Neue Haas Grotesk Display Pro')"
  ''',
]
